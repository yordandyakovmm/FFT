#pragma checksum "C:\Users\yordan.dyakov\source\repos\FFT\FFT\Views\Index\sound-speed.cshtml" "{ff1816ec-aa5e-4d10-87f7-6f4963833460}" "0ebf1b3f1f3bde56fc880b73c3d8df570cbce60e"
// <auto-generated/>
#pragma warning disable 1591
[assembly: global::Microsoft.AspNetCore.Razor.Hosting.RazorCompiledItemAttribute(typeof(AspNetCore.Views_Index_sound_speed), @"mvc.1.0.view", @"/Views/Index/sound-speed.cshtml")]
namespace AspNetCore
{
    #line hidden
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Threading.Tasks;
    using Microsoft.AspNetCore.Mvc;
    using Microsoft.AspNetCore.Mvc.Rendering;
    using Microsoft.AspNetCore.Mvc.ViewFeatures;
    [global::Microsoft.AspNetCore.Razor.Hosting.RazorSourceChecksumAttribute(@"SHA1", @"0ebf1b3f1f3bde56fc880b73c3d8df570cbce60e", @"/Views/Index/sound-speed.cshtml")]
    public class Views_Index_sound_speed : global::Microsoft.AspNetCore.Mvc.Razor.RazorPage<dynamic>
    {
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_0 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("src", new global::Microsoft.AspNetCore.Html.HtmlString("~/Scripts/p5/p5.js"), global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_1 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("src", new global::Microsoft.AspNetCore.Html.HtmlString("~/Scripts/p5/addons/p5.sound.js"), global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_2 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("src", new global::Microsoft.AspNetCore.Html.HtmlString("~/Scripts/lame/lame.min.js"), global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_3 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("src", new global::Microsoft.AspNetCore.Html.HtmlString("~/Scripts/main.js"), global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        #line hidden
        #pragma warning disable 0649
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperExecutionContext __tagHelperExecutionContext;
        #pragma warning restore 0649
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperRunner __tagHelperRunner = new global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperRunner();
        #pragma warning disable 0169
        private string __tagHelperStringValueBuffer;
        #pragma warning restore 0169
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperScopeManager __backed__tagHelperScopeManager = null;
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperScopeManager __tagHelperScopeManager
        {
            get
            {
                if (__backed__tagHelperScopeManager == null)
                {
                    __backed__tagHelperScopeManager = new global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperScopeManager(StartTagHelperWritingScope, EndTagHelperWritingScope);
                }
                return __backed__tagHelperScopeManager;
            }
        }
        private global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.UrlResolutionTagHelper __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper;
        #pragma warning disable 1998
        public async override global::System.Threading.Tasks.Task ExecuteAsync()
        {
            WriteLiteral("<script type=\"text/x-mathjax-config\">\r\n    MathJax.Hub.Config({tex2jax: {inlineMath: [[\'$\',\'$\'], [\'\\\\(\',\'\\\\)\']]}});\r\n</script>\r\n\r\n");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("script", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "0ebf1b3f1f3bde56fc880b73c3d8df570cbce60e4175", async() => {
            }
            );
            __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.UrlResolutionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_0);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\r\n");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("script", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "0ebf1b3f1f3bde56fc880b73c3d8df570cbce60e5214", async() => {
            }
            );
            __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.UrlResolutionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_1);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\r\n\r\n");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("script", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "0ebf1b3f1f3bde56fc880b73c3d8df570cbce60e6257", async() => {
            }
            );
            __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.UrlResolutionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_2);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral(@"

<div class=""container"">


    <div class=""main-grid"">


        <div class=""grid"">
            <div class=""convas-holder record"" style=""padding-top: 60px;"">
                <input type=""button"" id=""record"" onclick=""record($(this))"" value=""Record"" />
                <div class=""icon"">&nbsp;</div>
            </div>
            <div class=""convas-holder speed"" style=""padding-top: 10px;"">
                <label id=""lSpeed"">Speed </label>
                    <input  id=""iSpeed"" type=""range"" step=""0.1"" onchange=""$('#lSpeed').text('Speed:' + this.value)"" style=""width: 100px;"" id=""rangeA"" min=""0.1"" max=""10"" value=""1"" />
             </div>

        </div>
        <div class=""convas-grid"">
");
            WriteLiteral(@"
            <div class=""convas-title"">
                <label>FFT</label> 
            </div>

            <div id=""holder-fft"" class=""convas-holder"">

            </div>
            <script type=""text/javascript"">

                var sound = function (p) {

                    var mic, fft, recorder, soundFile;
                    var data = [];
                    for (var i = 1; i < 710; i++) {
                        data.push(300);
                    }
                    p.setup = function () {
                        p.createCanvas(710, 400);
                        p.noFill();

                        mic = new p5.AudioIn();
                        mic.start();

                        recorder = new p5.SoundRecorder();
                        recorder.setInput(mic);

                        // create an empty sound file that we will use to playback the recording
                        soundFile = new p5.SoundFile();

                        window.soundFile = soundFi");
            WriteLiteral(@"le;
                        window.recorder = recorder;
                        window.p = p;
                    };

                    //p.draw = function () {
                    //    var val = mic.getLevel();
                    //    data.push(val * 255 + Math.random() * 5);
                    //    data.push(val * 255 + Math.random() * 5);
                    //    if (data.length > 710) {
                    //        data = data.splice(3, 710);
                    //    }
                    //    p.background(400);
                       
                    //    p.beginShape();
                    //    for (i = 0; i < data.length; i++) {
                    //        p.vertex(i, p.map(data[i], 0, 255, p.height, 0));
                    //    }
                    //    p.endShape();
                    //};

                };

                var fft = function (p) {

                    var mic, fft;
                    p.setup = function () {
                      ");
            WriteLiteral(@"  p.createCanvas(710, 400);
                        p.noFill();

                        mic = new p5.AudioIn();
                        mic.start();
                        fft = new p5.FFT();
                        fft.setInput(mic);

                    };

                    p.draw = function () {
                        p.background(400);

                        var spectrum = fft.analyze();

                        p.beginShape();
                        for (i = 0; i < spectrum.length; i++) {
                            p.vertex(i, p.map(spectrum[i], 0, 255, p.height, 0));
                        }
                        p.endShape();
                    };

                };
                new p5(fft, 'holder-fft');
                new p5(sound);

                function record($this) {
                    if ($this.val() == ""Record"") {
                        window.recorder.record(window.soundFile);
                        $this.val('Recording');
                ");
            WriteLiteral(@"        $this.parent().addClass('recording');
                    }
                    else {
                        $this.val('Record');
                        $this.parent().removeClass('recording');

                        window.recorder.stop();
                        var samples = window.recorder.buffer[0].map(function (num) {
                            return num * 256 * 256;
                        });

                        var mp3Data = [];

                        channels = 1; //window.recorder.output.channelCount; //1 for mono or 2 for stereo
                        sampleRate = window.recorder.output.context.sampleRate; //44.1khz (normal mp3 samplerate)
                        kbps = 128; //encode 128kbps mp3
                        mp3encoder = new lamejs.Mp3Encoder(channels, sampleRate, kbps);
                        var mp3Data = [];


                        sampleBlockSize = window.recorder.bufferSize; //can be anything but make it a multiple of 576 to make encode");
            WriteLiteral(@"rs life easier

                        var mp3Data = [];
                        for (var i = 0; i < samples.length; i += sampleBlockSize) {
                            sampleChunk = samples.subarray(i, i + sampleBlockSize);
                            var mp3buf = mp3encoder.encodeBuffer(sampleChunk);
                            if (mp3buf.length > 0) {
                                mp3Data.push(mp3buf);
                            }
                        }
                        var mp3buf = mp3encoder.flush();   //finish writing mp3

                        if (mp3buf.length > 0) {
                            mp3Data.push(new Int8Array(mp3buf));
                        }

                        //var blob = new Blob(mp3Data, { type: 'audio/mp3' });

                        //saveData(blob, 'fft-demo.mp3');
                       

                        //window.p.saveSound(window.soundFile, 'fft-demo.wav');
                        var rate = parseFloat(document.querySelector(");
            WriteLiteral(@"'#iSpeed').value);
                        window.soundFile.rate(rate);
                        window.soundFile.play();
                        //window.soundFile.rate(4);

                    }
                }


                var saveData = (function () {
                    var a = document.createElement(""a"");
                    document.body.appendChild(a);
                    a.style = ""display: none"";
                    return function (blob, fileName) {
                        url = window.URL.createObjectURL(blob);
                        a.href = url;
                        a.download = fileName;
                        a.click();
                        window.URL.revokeObjectURL(url);
                    };
                }());

            </script>

        </div>
    </div>

</div>


<script type=""text/javascript"">
    var frward = '/mp3';
    var backward = '/fftd';
</script>
");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("script", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "0ebf1b3f1f3bde56fc880b73c3d8df570cbce60e14326", async() => {
            }
            );
            __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.UrlResolutionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_3);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\r\n");
        }
        #pragma warning restore 1998
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.ViewFeatures.IModelExpressionProvider ModelExpressionProvider { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IUrlHelper Url { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IViewComponentHelper Component { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IJsonHelper Json { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper<dynamic> Html { get; private set; }
    }
}
#pragma warning restore 1591
