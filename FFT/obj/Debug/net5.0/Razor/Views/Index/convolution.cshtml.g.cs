#pragma checksum "C:\Users\yordan.dyakov\source\repos\FFT\FFT\Views\Index\convolution.cshtml" "{ff1816ec-aa5e-4d10-87f7-6f4963833460}" "fad730c28c1126c9b9a080057f68d4dd6cbdc46e"
// <auto-generated/>
#pragma warning disable 1591
[assembly: global::Microsoft.AspNetCore.Razor.Hosting.RazorCompiledItemAttribute(typeof(AspNetCore.Views_Index_convolution), @"mvc.1.0.view", @"/Views/Index/convolution.cshtml")]
namespace AspNetCore
{
    #line hidden
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Threading.Tasks;
    using Microsoft.AspNetCore.Mvc;
    using Microsoft.AspNetCore.Mvc.Rendering;
    using Microsoft.AspNetCore.Mvc.ViewFeatures;
    [global::Microsoft.AspNetCore.Razor.Hosting.RazorSourceChecksumAttribute(@"SHA1", @"fad730c28c1126c9b9a080057f68d4dd6cbdc46e", @"/Views/Index/convolution.cshtml")]
    public class Views_Index_convolution : global::Microsoft.AspNetCore.Mvc.Razor.RazorPage<dynamic>
    {
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_0 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("src", new global::Microsoft.AspNetCore.Html.HtmlString("~/Content/cat1.png"), global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_1 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("src", new global::Microsoft.AspNetCore.Html.HtmlString("~/Content/cat.png"), global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_2 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("src", new global::Microsoft.AspNetCore.Html.HtmlString("~/Scripts/main.js"), global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        #line hidden
        #pragma warning disable 0649
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperExecutionContext __tagHelperExecutionContext;
        #pragma warning restore 0649
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperRunner __tagHelperRunner = new global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperRunner();
        #pragma warning disable 0169
        private string __tagHelperStringValueBuffer;
        #pragma warning restore 0169
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperScopeManager __backed__tagHelperScopeManager = null;
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperScopeManager __tagHelperScopeManager
        {
            get
            {
                if (__backed__tagHelperScopeManager == null)
                {
                    __backed__tagHelperScopeManager = new global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperScopeManager(StartTagHelperWritingScope, EndTagHelperWritingScope);
                }
                return __backed__tagHelperScopeManager;
            }
        }
        private global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.UrlResolutionTagHelper __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper;
        #pragma warning disable 1998
        public async override global::System.Threading.Tasks.Task ExecuteAsync()
        {
            WriteLiteral(@"<div class=""container"">
    <div class=""theme"" style=""padding: 50px 0 ; font-size: 40px; font-weight: 900; height: 100%; width: 100%; display: flex; flex-direction: column; align-items: center;  justify-content: space-between; color: white; background-color:black"">
        <div style=""width: 100%; display: flex; flex-direction: row;  align-self: flex-start; align-items: center; justify-content: center;  margin: 20px 0"">
            <div style=""border-top: solid; width: 80%; border-bottom-color: white; border-top-width: 2px;""></div>
        </div>
        <div class=""convoluteRow"">
            <canvas id=""c1"" data=""mouse.png""></canvas>
            <span>*</span>
            <div class=""matrixWrapper"">
                <div class=""multiplayer"">
                    <span style=""margin-left: 7px;"">1</span>
                    <span>------</span>
                    <input id=""common1"" value=""9"" />
                </div>
                <div class=""matrix"" id=""m1"">
                    <div>
        ");
            WriteLiteral(@"                <input value=""2"" />
                        <input value=""2"" />
                        <input value=""2"" />
                    </div>
                    <div>
                        <input value=""2"" />
                        <input value=""2"" />
                        <input value=""2"" />
                    </div>
                    <div>
                        <input value=""2"" />
                        <input value=""2"" />
                        <input value=""2"" />
                    </div>
                </div>
            </div>
            <span> = </span>
            <div>
                <div id=""l1"" style=""position: absolute; margin-top:  40px; margin-left: 40px; height: 100px; width: 100px;"" class=""loader""></div>
                <canvas height=""200px"" width=""200px"" id=""c1-result"" style=""cursor: pointer; border: solid 1px white"" onclick=""convolute1()""></canvas>
            </div>
        </div>

        <div style=""width: 100%; display: flex; flex-directi");
            WriteLiteral(@"on: row;  align-self: flex-start; align-items: center; justify-content: center;  margin: 20px 0"">
            <div style=""border-top: solid; width: 80%; border-bottom-color: white; border-top-width: 2px;""></div>
        </div>

        <div class=""convoluteRow"">
            <canvas id=""c2"" data=""mouse.png""></canvas>
            <span>*</span>
            <div class=""matrixWrapper"">
                <div class=""multiplayer"">
                    <span style=""margin-left: 7px;"">1</span>
                    <span>------</span>
                    <input id=""common2"" value=""1"" />
                </div>
                <div class=""matrix"" id=""m2"">
                    <div>
                        <input value=""1"" />
                        <input value=""1"" />
                        <input value=""1"" />
                        <input value=""1"" />
                        <input value=""1"" />
                        <input value=""1"" />
                    </div>
                    <div>
         ");
            WriteLiteral(@"               <input value=""-1"" />
                        <input value=""-1"" />
                        <input value=""-1"" />
                        <input value=""-1"" />
                        <input value=""-1"" />
                        <input value=""-1"" />
                    </div>
                    <div>
                        <input value=""0"" />
                        <input value=""0"" />
                        <input value=""0"" />
                        <input value=""0"" />
                        <input value=""0"" />
                        <input value=""0"" />
                    </div>
                    <div>
                        <input value=""0"" />
                        <input value=""0"" />
                        <input value=""0"" />
                        <input value=""0"" />
                        <input value=""0"" />
                        <input value=""0"" />
                    </div>
                    <div>
                        <input value=""0"" />
       ");
            WriteLiteral(@"                 <input value=""0"" />
                        <input value=""0"" />
                        <input value=""0"" />
                        <input value=""0"" />
                        <input value=""0"" />
                    </div>
                    <div>
                        <input value=""0"" />
                        <input value=""0"" />
                        <input value=""0"" />
                        <input value=""0"" />
                        <input value=""0"" />
                        <input value=""0"" />
                    </div>
                </div>
            </div>
            <span> = </span>
            <div>
                <div id=""l2"" style=""position: absolute; margin-top:  40px; margin-left: 40px; height: 100px; width: 100px;"" class=""loader""></div>
                <canvas height=""200px"" width=""200px"" id=""c2-result"" style=""cursor: pointer; border: solid 1px white"" onclick=""convolute2()""></canvas>
            </div>
        </div>

        <div style=""widt");
            WriteLiteral(@"h: 100%; display: flex; flex-direction: row;  align-self: flex-start; align-items: center; justify-content: center;  margin: 20px 0"">
            <div style=""border-top: solid; width: 80%; border-bottom-color: white; border-top-width: 2px;""></div>
        </div>

        <div class=""convoluteRow"">
            <div id=""l3"" style=""position: absolute; margin-top:  40px; margin-left: 40px; height: 100px; width: 100px;"" class=""loader""></div>
            <canvas style=""cursor: pointer"" onclick=""show()"" id=""c3"" data=""cat.png"" width=""200px"" height=""300px""></canvas>
            <span>*</span>
            <div class=""matrixWrapper"">
                <div class=""matrix"" id=""m3"">
                    <div>
                        <input value=""1"" />
                        <input value=""-1"" />
                        <input value=""0"" />
                        <input value=""0"" />
                        <input value=""0"" />

                    </div>
                    <div>
                        <inp");
            WriteLiteral(@"ut value=""1"" />
                        <input value=""-1"" />
                        <input value=""0"" />
                        <input value=""0"" />
                        <input value=""0"" />

                    </div>
                    <div>
                        <input value=""1"" />
                        <input value=""-1"" />
                        <input value=""0"" />
                        <input value=""0"" />
                        <input value=""0"" />

                    </div>
                    <div>
                        <input value=""1"" />
                        <input value=""-1"" />
                        <input value=""0"" />
                        <input value=""0"" />
                        <input value=""0"" />

                    </div>
                    <div>
                        <input value=""1"" />
                        <input value=""-1"" />
                        <input value=""0"" />
                        <input value=""0"" />
                      ");
            WriteLiteral("  <input value=\"0\" />\r\n\r\n                    </div>\r\n\r\n                </div>\r\n            </div>\r\n            <span> = </span>\r\n            <div>\r\n\r\n                ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("img", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagOnly, "fad730c28c1126c9b9a080057f68d4dd6cbdc46e11477", async() => {
            }
            );
            __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.UrlResolutionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_0);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral(@"</img>
            </div>
        </div>

        <div style=""width: 100%; display: flex; flex-direction: row;  align-self: flex-start; align-items: center; justify-content: center;  margin: 20px 0"">
            <div style=""border-top: solid; width: 80%; border-bottom-color: white; border-top-width: 2px;""></div>
        </div>

        <div class=""convoluteRow"">

            ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("img", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.SelfClosing, "fad730c28c1126c9b9a080057f68d4dd6cbdc46e12900", async() => {
            }
            );
            __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.UrlResolutionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_1);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral(@"
            <span>*</span>
            <div class=""matrixWrapper"">
                <div id=""l4"" style=""z-index: 30000; position: absolute; margin-top:  40px; margin-left: 40px; height: 100px; width: 100px;"" class=""loader""></div>
                <div class=""matrix"" id=""m4"" onclick=""show1()"" style=""cursor: pointer"">
                    <div>
                        <input value=""0"" />
                        <input value=""0"" />
                        <input value=""0"" />
                        <input value=""0"" />
                        <input value=""0"" />

                    </div>
                    <div>
                        <input value=""0"" />
                        <input value=""0"" />
                        <input value=""0"" />
                        <input value=""0"" />
                        <input value=""0"" />

                    </div>
                    <div>
                        <input value=""0"" />
                        <input value=""0"" />
                     ");
            WriteLiteral(@"   <input value=""0"" />
                        <input value=""0"" />
                        <input value=""0"" />

                    </div>
                    <div>
                        <input value=""0"" />
                        <input value=""0"" />
                        <input value=""0"" />
                        <input value=""0"" />
                        <input value=""0"" />

                    </div>
                    <div>
                        <input value=""0"" />
                        <input value=""0"" />
                        <input value=""0"" />
                        <input value=""0"" />
                        <input value=""0"" />

                    </div>

                </div>
            </div>
            <span> = </span>
            <div>

                ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("img", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagOnly, "fad730c28c1126c9b9a080057f68d4dd6cbdc46e15871", async() => {
            }
            );
            __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.UrlResolutionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_0);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral(@"</img>
            </div>

        </div>

    </div>


</div>
<script type=""text/javascript"">
    var frward = '/gps1';
    var backward = '/identities';

    var image = new Image();
    var canvas1 = document.getElementById('c1');
    var context1 = canvas1.getContext('2d');
    var canvas1_result = document.getElementById('c1-result');
    var context1_resulr = canvas1_result.getContext('2d');

    var canvas2 = document.getElementById('c2');
    var context2 = canvas2.getContext('2d');
    var canvas2_result = document.getElementById('c2-result');
    var context2_resulr = canvas2_result.getContext('2d');

    var value1 = 0;
    var x = [];
    var y = [];
    var xMatrix = null;
    var yMatrix = null;
    image.src = '/content/mouse.jpg';
    $('.loader').hide();


    function show() {
        $('#l3').show();
        var image1 = new Image();
        var canvas3 = document.getElementById('c3');
        var context3 = canvas3.getContext('2d');
        image1.src ");
            WriteLiteral(@"= '/content/cat.png';

        $(image1).load(function () {
            //Resize canvas for image
            $(""#c3"").attr({
                width: image1.width,
                height: image1.height
            });

            setTimeout(() => {
                context3.drawImage(image1, 0, 0);
                $('#l3').hide();
            }, 200);

        });

    }

    function show1() {
        $('#l4').show();
        setTimeout(() => {
            $(""#m4"").html($(""#m3"").html());
            $('#l4').hide();
        }, 200);
    }

    //When the image loads
    $(image).load(function () {
        //Resize canvas for image
        $(""#c1"").attr({
            width: image.width,
            height: image.height
        });
        $(""#c2"").attr({
            width: image.width,
            height: image.height
        });
        x[2] = x[1] = image.width;
        y[2] = y[1] = image.height;

        context1.drawImage(image, 0, 0);
        context2.drawImage(im");
            WriteLiteral(@"age, 0, 0);
    });

    function convolute1() {
        $('#l1').show();
        setTimeout(() => { convoluteCompute(1) }, 300);
    }
    function convolute2() {
        $('#l2').show();
        setTimeout(() => { convoluteCompute(2) }, 300);
    }
    function convoluteCompute(index) {
        xMatrix = yMatrix = $('#m' + index + ' > div').length;
        var cer = new Array(xMatrix);
        for (var i = 0; i < xMatrix; i++) {
            cer[i] = new Array(yMatrix);
            for (var j = 0; j < xMatrix; j++) {
                cer[i][j] = parseInt($($('#m' + index + ' > div')[i]).find('input')[j].value);
                //value1 = value1 + cer[i][j];
            }
        }
        $(""#c"" + index + ""-result"").attr({
            width: image.width - xMatrix,
            height: image.height - yMatrix
        });

        for (var i = 0; i < image.width - xMatrix; i++) {
            for (var j = 0; j < image.height - yMatrix; j++) {

                var pixelData = 0;
      ");
            WriteLiteral(@"          for (var k = 0; k < xMatrix; k++) {
                    for (var m = 0; m < yMatrix; m++) {
                        var color = index == 1
                            ? context1.getImageData(i + k, j + m, 1, 1).data[0]
                            : context2.getImageData(i + k, j + m, 1, 1).data[0];
                        //console.log(color);
                        //console.log(cer[k][m]);
                        pixelData = pixelData + cer[k][m] * color;
                    }
                }
                var value1 = parseFloat(document.querySelector('#common' + index).value);
                pixelData = pixelData / value1;

                var id = (index == 1
                    ? context1_resulr.createImageData(1, 1)
                    : context2_resulr.createImageData(1, 1));
                var d = id.data;
                d[0] = pixelData;
                d[1] = pixelData;
                d[2] = pixelData;
                d[3] = 255;
                if (index == ");
            WriteLiteral("1)\r\n                    context1_resulr.putImageData(id, i, j)\r\n                else\r\n                    context2_resulr.putImageData(id, i, j);\r\n            }\r\n        }\r\n\r\n        $(\'#l\' + index).hide();\r\n\r\n    }\r\n\r\n\r\n</script>\r\n");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("script", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "fad730c28c1126c9b9a080057f68d4dd6cbdc46e21399", async() => {
            }
            );
            __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.UrlResolutionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_2);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\r\n");
        }
        #pragma warning restore 1998
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.ViewFeatures.IModelExpressionProvider ModelExpressionProvider { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IUrlHelper Url { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IViewComponentHelper Component { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IJsonHelper Json { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper<dynamic> Html { get; private set; }
    }
}
#pragma warning restore 1591
